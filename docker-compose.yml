services:
  #infrustructure services
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
     - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce-network

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "[ -f /var/opt/mssql/data/master.mdf ]"]
      interval: 10s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - "mongodb_data:/data/db"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce-network

  seq:
    image: datalust/seq:latest
    container_name: seq
    ports:
      - "5341:80"
    environment:
      ACCEPT_EULA: "Y"
      SEQ_FIRSTRUN_NOAUTHENTICATION: "true"
    volumes:
      - seq_data:/data
    networks:
      - ecommerce-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: ecommerce-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # application services
  orderservice:
    build:
      context: .
      dockerfile: ./OrderService/Dockerfile
    container_name: orderservice
    ports:
      - "8080:8080"
      - "8081:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
      - ASPNETCORE_URLS=http://+:8080
    depends_on:
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  inventoryservice_api:
    build:
      context: .
      dockerfile: ./InventoryService/InventoryService.Api/Dockerfile
    container_name: inventoryservice_api
    ports:
      - "8082:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
    networks:
        - ecommerce-network
    restart: unless-stopped


  inventoryservice_worker:
    build:
      context: .
      dockerfile: ./InventoryService/InventoryService.Hosting/Dockerfile
    container_name: inventoryservice_worker
    environment:
      - DOTNET_ENVIRONMENT=Release
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      sqlserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped


  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: /Dockerfile
    container_name: apigateway
    ports:
      - "9000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    depends_on:
      - orderservice
      - inventoryservice_worker
      - inventoryservice_api
      - seq
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  rabbitmq_data:
  sqlserver_data:
  seq_data:
  mongodb_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge