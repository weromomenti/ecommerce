name: Build and Deploy All Services to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_orderservice:
        description: 'Deploy OrderService'
        required: false
        default: 'true'
        type: boolean
      deploy_inventoryservice:
        description: 'Deploy InventoryService'
        required: false
        default: 'true'  
        type: boolean
      deploy_chatbotservice:
        description: 'Deploy ChatBotService'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ecommercecontainerregiry.azurecr.io
  RESOURCE_GROUP: Learning
  CONTAINER_APP_ENV: az204-demo-env

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      orderservice: ${{ steps.changes.outputs.orderservice }}
      inventoryservice: ${{ steps.changes.outputs.inventoryservice }}
      chatbotservice: ${{ steps.changes.outputs.chatbotservice }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Detect changes
      id: changes
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "orderservice=${{ inputs.deploy_orderservice }}" >> $GITHUB_OUTPUT
          echo "inventoryservice=${{ inputs.deploy_inventoryservice }}" >> $GITHUB_OUTPUT
          echo "chatbotservice=${{ inputs.deploy_chatbotservice }}" >> $GITHUB_OUTPUT
        else
          echo "orderservice=$(git diff --name-only HEAD~1 HEAD | grep -q '^OrderService/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "inventoryservice=$(git diff --name-only HEAD~1 HEAD | grep -q '^InventoryService/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
          echo "chatbotservice=$(git diff --name-only HEAD~1 HEAD | grep -q '^ChatBotService/' && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        fi

  build-and-deploy-orderservice:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.orderservice == 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push OrderService image
      run: |
        docker build -t $REGISTRY/orderservice:${{ github.sha }} ./OrderService
        docker push $REGISTRY/orderservice:${{ github.sha }}
        docker tag $REGISTRY/orderservice:${{ github.sha }} $REGISTRY/orderservice:latest
        docker push $REGISTRY/orderservice:latest

    - name: Deploy OrderService to Azure Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az containerapp update \
            --name orderservice \
            --resource-group $RESOURCE_GROUP \
            --image $REGISTRY/orderservice:${{ github.sha }}

  build-and-deploy-inventoryservice:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.inventoryservice == 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push InventoryService API image
      run: |
        docker build -f ./InventoryService/InventoryService.Api/Dockerfile -t $REGISTRY/inventoryservice-api:${{ github.sha }} ./InventoryService
        docker push $REGISTRY/inventoryservice-api:${{ github.sha }}
        docker tag $REGISTRY/inventoryservice-api:${{ github.sha }} $REGISTRY/inventoryservice-api:latest
        docker push $REGISTRY/inventoryservice-api:latest

    - name: Build and push InventoryService Worker image
      run: |
        docker build -f ./InventoryService/InventoryService.Hosting/Dockerfile -t $REGISTRY/inventoryservice-worker:${{ github.sha }} ./InventoryService
        docker push $REGISTRY/inventoryservice-worker:${{ github.sha }}
        docker tag $REGISTRY/inventoryservice-worker:${{ github.sha }} $REGISTRY/inventoryservice-worker:latest
        docker push $REGISTRY/inventoryservice-worker:latest

    - name: Deploy InventoryService API
      uses: azure/CLI@v1
      with:
        inlineScript: |
          if ! az containerapp show --name inventoryservice-api --resource-group $RESOURCE_GROUP &> /dev/null; then
            az containerapp create \
              --name inventoryservice-api \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $REGISTRY/inventoryservice-api:${{ github.sha }} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 0.5 \
              --memory 1Gi \
              --env-vars \
                ASPNETCORE_ENVIRONMENT=Release \
                ConnectionStrings__DefaultConnection="${{ secrets.INVENTORY_SQL_CONNECTION_STRING }}" \
                ConnectionStrings__MongoDb="${{ secrets.INVENTORY_MONGODB_CONNECTION_STRING }}" \
                ConnectionStrings__Redis="${{ secrets.INVENTORY_REDIS_CONNECTION_STRING }}" \
                MongoDb__DatabaseName=InventoryDb
          else
            az containerapp update \
              --name inventoryservice-api \
              --resource-group $RESOURCE_GROUP \
              --image $REGISTRY/inventoryservice-api:${{ github.sha }}
          fi

    - name: Deploy InventoryService Worker
      uses: azure/CLI@v1
      with:
        inlineScript: |
          if ! az containerapp show --name inventoryservice-worker --resource-group $RESOURCE_GROUP &> /dev/null; then
            az containerapp create \
              --name inventoryservice-worker \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $REGISTRY/inventoryservice-worker:${{ github.sha }} \
              --ingress internal \
              --min-replicas 1 \
              --max-replicas 2 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                DOTNET_ENVIRONMENT=Release \
                ConnectionStrings__DefaultConnection="${{ secrets.INVENTORY_SQL_CONNECTION_STRING }}" \
                ConnectionStrings__MongoDb="${{ secrets.INVENTORY_MONGODB_CONNECTION_STRING }}" \
                ConnectionStrings__Redis="${{ secrets.INVENTORY_REDIS_CONNECTION_STRING }}" \
                RabbitMQ__Host="${{ secrets.RABBITMQ_HOST }}" \
                RabbitMQ__Port=5672 \
                MongoDb__DatabaseName=InventoryDb
          else
            az containerapp update \
              --name inventoryservice-worker \
              --resource-group $RESOURCE_GROUP \
              --image $REGISTRY/inventoryservice-worker:${{ github.sha }}
          fi

  build-and-deploy-chatbotservice:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.chatbotservice == 'true'
    steps:
    - uses: actions/checkout@v4

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push ChatBotService image
      run: |
        docker build -t $REGISTRY/chatbotservice:${{ github.sha }} ./ChatBotService
        docker push $REGISTRY/chatbotservice:${{ github.sha }}
        docker tag $REGISTRY/chatbotservice:${{ github.sha }} $REGISTRY/chatbotservice:latest
        docker push $REGISTRY/chatbotservice:latest

    - name: Deploy ChatBotService
      uses: azure/CLI@v1
      with:
        inlineScript: |
          if ! az containerapp show --name chatbotservice --resource-group $RESOURCE_GROUP &> /dev/null; then
            az containerapp create \
              --name chatbotservice \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $REGISTRY/chatbotservice:${{ github.sha }} \
              --target-port 8080 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 2 \
              --cpu 0.25 \
              --memory 0.5Gi \
              --env-vars \
                ASPNETCORE_ENVIRONMENT=Production \
                AzureOpenAI__Endpoint="${{ secrets.AZURE_OPENAI_ENDPOINT }}" \
                AzureOpenAI__OpenAiKey="${{ secrets.AZURE_OPENAI_KEY }}"
          else
            az containerapp update \
              --name chatbotservice \
              --resource-group $RESOURCE_GROUP \
              --image $REGISTRY/chatbotservice:${{ github.sha }}
          fi